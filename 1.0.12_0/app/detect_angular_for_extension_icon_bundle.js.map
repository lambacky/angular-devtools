{
  "version": 3,
  "sources": ["../../../../../../../../devtools/projects/shared-utils/src/lib/angular-check.ts", "../../../../../../../../devtools/projects/protocol/src/lib/message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/same-page-message-bus.ts", "../../../../../../../../devtools/projects/shell-browser/src/app/detect-angular-for-extension-icon.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµHydratedNode as HydrationNode} from '@angular/core';\n\ndeclare const ng: any;\n\nexport const appIsAngularInDevMode = (): boolean => {\n  return appIsAngular() && appHasGlobalNgDebugObject();\n};\n\nexport const appIsAngularIvy = (): boolean => {\n  const rootElement = (window as any).document.querySelector('[ng-version]');\n  return typeof rootElement?.__ngContext__ !== 'undefined';\n};\n\nexport const appIsAngular = (): boolean => {\n  return !!getAngularVersion();\n};\n\nexport const appIsSupportedAngularVersion = (): boolean => {\n  const version = getAngularVersion();\n  if (!version) {\n    return false;\n  }\n  const major = parseInt(version.toString().split('.')[0], 10);\n  return appIsAngular() && (major >= 12 || major === 0);\n};\n\n/**\n * We check if the global `window.ng` is an object and if this object\n * has the `getComponent` or `probe` methods attached to it.\n *\n * `ng.probe` is a view engine method, but to ensure that we correctly\n * detect development mode we need to consider older rendering engines.\n *\n * In some g3 apps processed with Closure, `ng` is a function,\n * which means that `typeof ng !== 'undefined'` is not a sufficient check.\n *\n * @returns if the app has global ng debug object\n */\nconst appHasGlobalNgDebugObject = (): boolean => {\n  return (\n    typeof ng === 'object' &&\n    (typeof ng.getComponent === 'function' || typeof ng.probe === 'function')\n  );\n};\n\nexport const getAngularVersion = (): string | null => {\n  const el = document.querySelector('[ng-version]');\n  if (!el) {\n    return null;\n  }\n  return el.getAttribute('ng-version');\n};\n\nexport function isHydrationEnabled(): boolean {\n  return Array.from(document.querySelectorAll('[ng-version]')).some(\n    (rootNode) => (rootNode as HydrationNode)?.__ngDebugHydrationInfo__,\n  );\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Parameters<F> = F extends (...args: infer T) => any ? T : never;\n\nexport abstract class MessageBus<T> {\n  abstract on<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract once<E extends keyof T>(topic: E, cb: T[E]): void;\n  abstract emit<E extends keyof T>(topic: E, args?: Parameters<T[E]>): boolean;\n  abstract destroy(): void;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Events, MessageBus, Parameters} from 'protocol';\n\ntype AnyEventCallback<Ev> = <E extends keyof Ev>(topic: E, args: Parameters<Ev[E]>) => void;\n\ntype ListenerFn = (e: MessageEvent) => void;\n\nexport class SamePageMessageBus extends MessageBus<Events> {\n  private _listeners: ListenerFn[] = [];\n\n  constructor(\n    private _source: string,\n    private _destination: string,\n  ) {\n    super();\n  }\n\n  onAny(cb: AnyEventCallback<Events>): () => void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || !e.data.topic || e.data.source !== this._destination) {\n        return;\n      }\n      cb(e.data.topic, e.data.args);\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  override on<E extends keyof Events>(topic: E, cb: Events[E]): () => void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        (cb as any).apply(null, e.data.args);\n      }\n    };\n    window.addEventListener('message', listener);\n    this._listeners.push(listener);\n    return () => {\n      this._listeners.splice(this._listeners.indexOf(listener), 1);\n      window.removeEventListener('message', listener);\n    };\n  }\n\n  override once<E extends keyof Events>(topic: E, cb: Events[E]): void {\n    const listener: ListenerFn = (e) => {\n      if (e.source !== window || !e.data || e.data.source !== this._destination || !e.data.topic) {\n        return;\n      }\n      if (e.data.topic === topic) {\n        (cb as any).apply(null, e.data.args);\n      }\n      window.removeEventListener('message', listener);\n    };\n    window.addEventListener('message', listener);\n  }\n\n  override emit<E extends keyof Events>(topic: E, args?: Parameters<Events[E]>): boolean {\n    window.postMessage(\n      {\n        source: this._source,\n        topic,\n        args,\n        __ignore_ng_zone__: true,\n      },\n      '*',\n    );\n    return true;\n  }\n\n  override destroy(): void {\n    this._listeners.forEach((l) => window.removeEventListener('message', l));\n    this._listeners = [];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AngularDetection} from 'protocol';\nimport {\n  appIsAngular,\n  appIsAngularInDevMode,\n  appIsAngularIvy,\n  appIsSupportedAngularVersion,\n} from 'shared-utils';\n\nimport {SamePageMessageBus} from './same-page-message-bus';\n\nconst detectAngularMessageBus = new SamePageMessageBus(\n  `angular-devtools-detect-angular-${location.href}`,\n  `angular-devtools-content-script-${location.href}`,\n);\n\nfunction detectAngular(win: Window): void {\n  const isAngular = appIsAngular();\n  const isSupportedAngularVersion = appIsSupportedAngularVersion();\n  const isDebugMode = appIsAngularInDevMode();\n  const isIvy = appIsAngularIvy();\n\n  const detection: AngularDetection = {\n    isIvy,\n    isAngular,\n    isDebugMode,\n    isSupportedAngularVersion,\n    isAngularDevTools: true,\n  };\n\n  // For the background script to toggle the icon.\n  win.postMessage(detection, '*');\n\n  // For the content script to inject the backend.\n  detectAngularMessageBus.emit('detectAngular', [\n    {\n      isIvy,\n      isAngular,\n      isDebugMode,\n      isSupportedAngularVersion,\n      isAngularDevTools: true,\n    },\n  ]);\n\n  setTimeout(() => detectAngular(win), 1000);\n}\n\ndetectAngular(window);\n"],
  "mappings": "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",
  "names": ["appIsAngularInDevMode", "appIsAngular", "appHasGlobalNgDebugObject", "appIsAngularIvy", "window", "document", "querySelector", "__ngContext__", "getAngularVersion", "appIsSupportedAngularVersion", "version", "major", "parseInt", "toString", "split", "ng", "getComponent", "probe", "el", "getAttribute", "MessageBus", "SamePageMessageBus", "MessageBus", "_source", "_destination", "_listeners", "constructor", "onAny", "cb", "listener", "e", "source", "window", "data", "topic", "args", "addEventListener", "push", "splice", "indexOf", "removeEventListener", "on", "apply", "once", "emit", "postMessage", "__ignore_ng_zone__", "destroy", "forEach", "l", "detectAngularMessageBus", "SamePageMessageBus", "location", "href", "detectAngular", "win", "isAngular", "appIsAngular", "isSupportedAngularVersion", "appIsSupportedAngularVersion", "isDebugMode", "appIsAngularInDevMode", "isIvy", "appIsAngularIvy", "detection", "isAngularDevTools", "postMessage", "emit", "setTimeout", "window"]
}
